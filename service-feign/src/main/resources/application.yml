#eureka:
#  client:
 #   serviceUrl:
 #     defaultZone: http://localhost:8761/eureka/
server:
  port: 8765
spring:
  application:
    name: service-feign
  #zipkin:
    #base-url: http://localhost:9411 #设置链路跟踪url 
  #srping 下redis配置
  redis:    host: localhost #redis 服务器地址
    database: 0 #Redis数据库索引，默认为：0
    port: 6379 #Redis服务器连接端口
    password: #Redis服务器连接密码，默认为空
    jedis:      pool:        max-active: 8 #连接池最大连接数（使用负值表示没有限制）
        max-wait: -1ms #连接池最大阻塞连接时间 （使用负值表示没有限制）
        max-idle: 8 #连接池中最大空闲连接
        min-idle: 0 #连接池中最小空闲连接
    timeout: 10000ms #连接超时时间（毫秒）
  #rabbitmq 接受端配置
  rabbitmq:
    host: localhost
    port: 5672
    username: wangpan
    password: 123456
  kafka:
    bootstrap-servers: localhost:9092
    listener:      missing-topics-fatal: false # 消费端监听的topic不存在时，项目启动会报错(关掉)
    producer:  #生产者配置      retries: 0 #消息发送失败，重发的次数
      acks: 1 # 应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
      batch-size: 16384  #每次批量发送消息的数量,批量大小
      buffer-memory: 335554432 #每次批量发送消息的缓冲区大小
      key-serializer: org.apache.kafka.common.serialization.StringSerializer     # 指定消息key的编解码方式      value-serializer: org.apache.kafka.common.serialization.StringSerializer   # 指定消息消息体的编解码方式
      properties:        linger:
          ms: 0  # 提交延时,linger.ms为0表示每接收到一条消息就提交给kafka,这时候batch-size其实就没用了 
        partitioner:
          class: com.panda.serviceimpl.kafka.CustomizePartitioner  #配置自定义分区器，配置的值就是分区器类的全路径名      consumer:  #消费者配置      group-id: user-log-group  # 默认的消费组ID
      auto-offset-reset: latest  # 当kafka中没有初始offset或offset超出范围时将自动重置offset; earliest:重置为分区中最小的offset; latest:重置为分区中最新的offset(消费分区中新产生的数据); none:只要有一个分区不存在已提交的offset,就抛出异常;
      enable-auto-commit: true  # 是否自动提交offset
      auto-commit-interval: 1000 # 提交offset延时(接收到消息后多久提交offset)
      properties:
        session:
          timeout: 
            ms: 120000  # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
        request:
          timeout:
            ms: 180000 # 消费请求超时时间    
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer     # 指定消息key的反编解码方式      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer   # 指定消息消息体的反编解码方式                                
feign:
  hystrix:
    enabled: true #Feign是自带断路器，开启断路器
# 根节点下，自定义redis key    
redis:
  key:
    prefix: 
      authCode: "authCode:"
    expire:
      authCode: 120 #验证码超期时间  
      
# 自定义jwt key
jwt:
  tokenHeader: Authorization #JWT存储的请求头
  secret: mySecret #JWT加解密使用的密钥
  expiration: 604800 #JWT的超期限时间(60*60*24)
  tokenHead: Bearer  #JWT负载中拿到开头          

    