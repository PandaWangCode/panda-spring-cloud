RabbitMQ
https://blog.csdn.net/wangbing25307/article/details/80845641

ThreadLocal:
https://www.cnblogs.com/fsmly/p/11020641.html

ArrayBlockQueue:
https://blog.csdn.net/luzhensmart/article/details/81712583

Java并发包-java.util.concurrent详解
https://blog.csdn.net/qq_27378875/article/details/81610696

kafka事务，transactional
https://www.it610.com/article/1282350337788755968.htm
https://github.com/fangyuan94/kafkaDemo/tree/master/src/main/java/com/demo/kafkaDemo

停止：
net stop RabbitMQ 
开始：
net start RabbitMQ &
重启：
net stop RabbitMQ && net start RabbitMQ


kafka window启动步骤：
 1、打开新的cmd，输入zkServer，运行Zookeeper
 2、①启动Kafka服务器
　　新建cmd窗口:
      cd D:\Tool\kafka_2.11-2.1.1 
     .\bin\windows\kafka-server-start.bat .\config\server.properties
	 

面试题：
Spring：
Spring由哪些模块组成?以下是Spring框架的基本模块：
Coremodule
Beanmodule
Contextmodule
ExpressionLanguagemodule
JDBCmodule
ORMmodule
OXMmodule
JavaMessagingService(JMS)module
Transactionmodule
Webmodule
Web-Servletmodule

什么是SpringIOC容器？
SpringIOC负责创建对象，
管理对象（通过依赖注入（DI），
装配对象，配置对象，并且管理这些对象的整个生命周期。

IOC的优点是什么？
IOC或依赖注入把应用的代码量降到最低。
它使应用容易测试，单元测试不再需要单例和JNDI查找机制。
最小的代价和最小的侵入性使松散耦合得以实现。
IOC容器支持加载服务时的饿汉式初始化和懒加载。


有哪些不同类型的IOC（依赖注入）方式？

构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。
Setter方法注入：Setter方法注入是容器通过调用无参构造器或无参static工厂方法实例化bean之后，调用该bean的setter方法，
即实现了基于setter的依赖注入

Spring框架支持以下五种bean的作用域：
singleton:bean在每个Springioc容器中只有一个实例。
prototype：一个bean的定义可以有多个实例
request：每次http请求都会创建一个bean，该作用域仅在基于web的SpringApplicationContext情形下有效。
session：在一个HTTPSession中，一个bean定义对应一个实例。该作用域仅在基于web的SpringApplicationContext情形下有效。
global-session：在一个全局的HTTPSession中，一个bean定义对应一个实例。该作用域仅在基于web的SpringApplicationContext情形下有效。


有五种自动装配的方式，可以用来指导Spring容器用自动装配方式来进行依赖注入。
no：默认的方式是不进行自动装配，通过显式设置ref属性来进行装配。
byName：通过参数名自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byname，
之后容器试图匹配、装配和该bean的属性具有相同名字的bean。
byType:：通过参数类型自动装配，Spring容器在配置文件中发现bean的autowire属性被设置成byType，之后容器试图匹配、装配和该bean的属性具有相同类型的bean。
如果有多个bean符合条件，则抛出错误。
constructor：这个方式类似于byType，但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。
autodetect：首先尝试使用constructor来自动装配，如果无法工作，则使用byType方式。

Aspect切面AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。
比如，一个日志模块可以被称作日志的AOP切面。
根据需求的不同，一个应用程序可以有若干切面。
在SpringAOP中，切面通过带有@Aspect注解的类实现。

Spring切面可以应用五种类型的通知：
before：前置通知，在一个方法执行前被调用。
after:在方法执行之后调用的通知，无论方法执行是否成功。
after-returning:仅当方法成功完成后执行的通知。
after-throwing:在方法抛出异常退出时执行的通知。
around:在方法执行之前和之后调用的通知。

DispatcherServletSpring的MVC框架
是围绕DispatcherServlet来设计的，它用来处理所有的HTTP请求和响应。

WebApplicationContext
WebApplicationContext继承了ApplicationContext并增加了一些WEB应用必备的特有功能，
它不同于一般的ApplicationContext，因为它能处理主题，并找到被关联的servlet。

67.什么是SpringMVC框架的控制器？
控制器提供一个访问应用程序的行为，此行为通常通过服务接口实现。
控制器解析用户输入并将其转换为一个由视图呈现给用户的模型。
Spring用一个非常抽象的方式实现了一个控制层，允许用户创建多种用途的控制器。

68.@Controller注解该注解表明该类扮演控制器的角色，Spring不需要你继承任何其他控制器基类或引用ServletAPI。
69.@RequestMapping注解该注解是用来映射一个URL到一个类或一个特定的方处理法上。
70.返回Json用什么注解？@ResponseBody


Redis面试题
Redis本质上是一个Key-Value类型的内存数据库，很像memcached，整个数据库统统加载在内存当中进行操作，
定期通过异步操作把数据库数据flush到硬盘上进行保存。
因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过10万次读写操作，是已知性能最快的Key-Value DB。
此外单个value的最大限制是1GB，不像memcached只能保存1MB的数据.


因此Redis可以用来实现很多有用的功能，
比方说用他的List来做FIFO双向链表，
实现一个轻量级的高性能消息队列服务，
用他的Set可以做高性能的tag系统等等。
另外Redis也可以对存入的Key-Value设置expire时间，因此也可以被当作一个功能加强版的memcached来用。
Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，
因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。


Redis支持哪几种数据类型？String、List、Set、Sorted Set、hashes

6、Redis有哪几种数据淘汰策略？
noeviction:返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外）
allkeys-lru: 尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。
volatile-lru: 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。
allkeys-random: 回收随机的键使得新添加的数据有空间存放。
volatile-random: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。
volatile-ttl: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放

7、一个字符串类型的值能存储最大容量是多少？512M

8、为什么Redis需要把所有数据放到内存中？
Redis为了达到最快的读写速度将数据都读到内存中，并通过异步的方式将数据写入磁盘。
所以redis具有快速和数据持久化的特征。如果不将数据放在内存中，磁盘I/O速度为严重影响redis的性能。
在内存越来越便宜的今天，redis将会越来越受欢迎。如果设置了最大使用的内存，则数据已有记录数达到内存限值后不能继续插入新值。

Redis有哪些适合的场景？
（1）、会话缓存（Session Cache）最常用的一种使用Redis的情景是会话缓存（session  cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。
当维护一个不是严格要求一致性的缓存时，如果用户的购物车信息全部丢失，大部分人都会不高兴的，现在，他们还会这样吗？
幸运的是，随着Redis 这些年的改进，很容易找到怎么恰当的使用Redis来缓存会话的文档。甚至广为人知的商业平台Magento也提供Redis的插件。
（2）、全页缓存（FPC）除基本的会话token之外，Redis还提供很简便的FPC平台。
回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。
再次以Magento为例，Magento提供一个插件来使用Redis作为全页缓存后端。
此外，对WordPress的用户来说，Pantheon有一个非常好的插件wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。
（3）、队列Reids在内存存储引擎领域的一大优点是提供list 和set 操作，这使得Redis能作为一个很好的消息队列平台来使用。
Redis作为队列使用的操作，就类似于本地程序语言（如Python）对list 的push/pop 操作。
如果你快速的在Google中搜索“Redis  queues”，你马上就能找到大量的开源项目，这些项目的目的就是利用Redis创建非常好的后端工具，
以满足各种队列需求。例如，Celery有一个后台就是使用Redis作为broker，你可以从这里去查看。
（4），排行榜/计数器Redis在内存中对数字进行递增或递减的操作实现的非常好。
  集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。
  所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：
更多关注
当然，这是假定你是根据你用户的分数做递增的排序。
如果你想返回用户及用户的分数，你需要这样执行：ZRANGE user_scores 0 10 WITHSCORES
Agora Games就是一个很好的例子，用Ruby实现的，它的排行榜就是使用Redis来存储数据的，你可以在这里看到。
（5）、发布/订阅最后（但肯定不是最不重要的）是Redis的发布/订阅功能。发布/订阅的使用场景确实非常多。
我已看见人们在社交网络连接中使用，还可作为基于发布/订阅的脚本触发器，甚至用Redis的发布/订阅功能来建立聊天系统！（不，这是真的，你可以去核实）。

Redis支持的Java客户端都有哪些？官方推荐用哪个？
Redisson、Jedis、lettuce等等，官方推荐使用Redisson。

15、Redis和Redisson有什么关系？
Redisson是一个高级的分布式协调Redis客服端，能帮助用户在分布式环境中轻松实现一些Java的对象
(Bloom   filter,   BitSet,   Set,   SetMultimap,   ScoredSortedSet,   SortedSet,   Map, ConcurrentMap,  List, 
 ListMultimap,  Queue,  BlockingQueue,  Deque,  BlockingDeque,  Semaphore, Lock, ReadWriteLock, AtomicLong, 
 CountDownLatch, Publish / Subscribe, HyperLogLog)。
 
 16、Jedis与Redisson对比有什么优缺点？
 Jedis是Redis的Java实现的客户端，其API提供了比较全面的Redis命令的支持；Redisson实现了分布式和可扩展的Java数据结构，
 和Jedis相比，功能较为简单，不支持字符串操作，不支持排序、事务、管道、分区等Redis特性。
 Redisson的宗旨是促进使用者对Redis的关注分离，从而让使用者能够将精力更集中地放在处理业务逻辑上。
 
 17、说说Redis哈希槽的概念？
 Redis集群没有使用一致性hash,而是引入了哈希槽的概念，
 Redis集群有16384个哈希槽，
 每个key通过CRC16校验后对16384取模来决定放置哪个槽，集群的每个节点负责一部分hash槽。
 
 19、Redis集群的主从复制模型是怎样的？为了使在部分节点失败或者大部分节点无法通信的情况下集群仍然可用，
 所以集群使用了主从复制模型,每个节点都会有N-1个复制品.
 
 20、Redis集群会有写操作丢失吗？为什么？Redis并不能保证数据的强一致性，这意味这在实际中集群在特定的条件下可能会丢失写操作。
 
 21、Redis集群之间是如何复制的？异步复制
 
 22、Redis集群最大节点个数是多少？16384个。
 
 23、Redis集群如何选择数据库？Redis集群目前无法做数据库选择，默认在0数据库。
 
 24、怎么测试Redis的连通性？ping
 
 25、Redis中的管道有什么用？一次请求/响应服务器能实现处理新的请求即使旧的请求还未被响应。这样就可以将多个命令发送到服务器，而不用等待回复，最后在一个步骤中读取该答复。这就是管道（pipelining），是一种几十年来广泛使用的技术。例如许多POP3协议已经实现
支持这个功能，大大加快了从服务器下载新邮件的过程。

26、怎么理解Redis事务？事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。
事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。
事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。

27、Redis事务相关的命令有哪几个？
MULTI、EXEC、DISCARD、WATCH

28、Redis key的过期时间和永久有效分别怎么设置？
  EXPIRE和PERSIST命令。
Redis回收进程如何工作的？一个客户端运行了新的命令，添加了新的数据。
Redi检查内存使用情况，如果大于maxmemory的限制, 则根据设定好的策略进行回收。一个新的命令被执行，等等。
所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。
如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。

31、Redis回收使用的是什么算法？LRU算法
32、Redis如何做大量数据插入？
48、Redis提供了哪几种持久化方式？
RDB持久化方式能够在指定的时间间隔能对你的数据进行快照存储.
AOF持久化方式记录每次对服务器写的操作,当服务器重启的时候会重新执行这些命令来恢复原始的数据,
AOF命令以redis协议追加保存每次写的操作到文件末尾.Redis还能对AOF文件进行后台重写,使得AOF文件的体积不至于过大.
如果你只希望你的数据在服务器运行的时候存在,你也可以不使用任何持久化方式.你也可以同时开启两种持久化方式, 在这种情况下, 当redis重启的时候会优先载入AOF文件来恢复原始的数据,因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整.最重要的事情是了解RDB和AOF持久化方式的不同,让我们以RDB持久化方式开始。
  
  
